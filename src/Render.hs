module Render where

import Type (Block (..), Number (..), Space (..))

render :: [[Block]] -> String
render w = unlines board
  where
    raw = map tail (tail w)
    lines = map (concatMap renderBlock) raw
    board = widthIndex : zipWith (++) heightIndex lines
    height = length w - 2
    width = length (head w) - 2
    heightIndex = map show [0 .. height - 1]
    widthIndex = concatMap ((" " ++) . show) [0 .. width - 1]

renderBlock :: Block -> String
renderBlock Edge = ""
renderBlock (Hide _) = "‚¨õ"
renderBlock (Show Bomb) = "üí£"
renderBlock (Show Explode) = "üí•"
renderBlock (Show Empty) = "‚¨ú"
renderBlock (Show (Number n)) = renderNumber n

renderNumber :: Number -> String
renderNumber One = "1‚É£Ô∏è"
renderNumber Two = "2‚É£Ô∏è"
renderNumber Three = "3‚É£Ô∏è"
renderNumber Four = "4‚É£Ô∏è"
renderNumber Five = "5‚É£Ô∏è"
renderNumber Six = "6‚É£Ô∏è"
renderNumber Seven = "7‚É£Ô∏è"
renderNumber Eight = "8‚É£Ô∏è"
